<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Transfer_order_model extends MY_Model {

    public function __construct() {
        parent::__construct();
        MY_Model::set_table("tblCOM_TO");
    }

    public function table_data($data, $type) {

        extract($data);

        $this->db->select(array(
                    'to_char("TO_DocDate", \'mm/dd/yyyy\') as "TO_DocDate" ',
                    'TO_DocNo',
                    'TO_TransferFrom',
                    'TO_TransferTo',
                    'TO_Company',
                    'TO_Status',
                    'TO_Remarks',
                    'TO_Amount',
                    'MD5("TO_DocNo") AS id'))
                ->order_by("DateCreated DESC")
                ->group_by("tblCOM_TO.TO_DocNo");


        if (isset($queries['date-from'])) {
            $this->db->where(array('DATE("TO_DocDate") >=' => $queries['date-from']));
        }

        if (isset($queries['date-to'])) {
            $this->db->where(array('DATE("TO_DocDate") <=' => $queries['date-to']));
        }

        if (isset($queries['location'])) {
            if ($type == 'incoming') {
                $this->db->where(
                        array(
                            'TO_Status !='  => 'Closed',
                            'TO_TransferTo' => $queries['location']
                        )
                );
            } else if ($type == 'outgoing') {
                $this->db->where(
                        array(
                            'TO_Status !='    => 'Closed',
                            'TO_TransferFrom' => $queries['location']
                        )
                );
            }
        }

        if (isset($queries['company'])) {
            if ($type == 'incoming') {
                $this->db->where(
                        array(
                            'TO_Status !='  => 'Closed',
                            'TO_Company' => $queries['company']
                        )
                );
            } else if ($type == 'outgoing') {
                $this->db->where(
                        array(
                            'TO_Status !='    => 'Closed',
                            'TO_Company' => $queries['company']
                        )
                );
            }
        }

        if (isset($queries['search'])) {
            $this->db->or_having(array(
                'LOWER(CAST("TO_DocDate" as text)) LIKE'      => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("TO_DocNo" as text)) LIKE'        => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("TO_TransferFrom" as text)) LIKE' => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("TO_TransferTo" as text)) LIKE'   => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("TO_Company" as text)) LIKE'      => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("TO_Status" as text)) LIKE'       => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("TO_Remarks" as text)) LIKE'      => '%' . strtolower($queries['search']) . '%'));
        }

        if (isset($sorts)) {
            $res = array();
            foreach ($sorts as $key => $value) {
                $order = $value == 1 ? "ASC" : "DESC";
                array_push($res, $key . " " . $order);
            }
            $this->db->order_by(implode(",", $res));
        }

        $result = $this->db->get("tblCOM_TO");

        if ($result->num_rows() > 0) {
            return array(
                'rows'  => $result->num_rows(),
                'count' => $result->num_rows(),
                'data'  => $result->result_array());
        } else {
            return FALSE;
        }
    }

    public function update($header, $details) {

        $status = 0;

        $header_where  = array('TO_DocNo' => $header["TO_DocNo"]);
        $details_where = array('TOD_TO_DocNo' => $header["TO_DocNo"]);

        try {
            $this->db->trans_begin();

            //  TO_Amount is always auto generated by details
            unset($header["TO_Amount"]);

            //  update header
            $this->db->where($header_where)->update('tblCOM_TO', $header);

            //  reset details
            $this->db->where($details_where)->delete('tblCOM_TODetail');

            if ($details) {
                $reimbursement_amount = $this->_store_details($header, $details);

                //  update transfer order amount
                $new_reimbursement = array(
                    'TO_Amount' => $reimbursement_amount
                );
                $this->db->where($header_where)->update('tblCOM_TO', $new_reimbursement);
            }

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
            } else {
                $this->db->trans_commit();
                $status = 1;
            }
        } catch (Exception $e) {
            $this->db->trans_rollback();
        }

        return $status;
    }

    private function _store_details($header, $details) {
        $total_amount = 0;
        foreach ($details as $value) {
            $empty = !array_filter($value);
            if (!empty($value) && !$empty) {
                $value['TOD_TO_DocNo'] = $header['TO_DocNo'];

                $total_amount += $value["TOD_Total"];

                $this->db->insert('tblCOM_TODetail', add_data($value));
            }
        }

        return $total_amount;
    }

}
