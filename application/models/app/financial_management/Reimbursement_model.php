<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Reimbursement_model extends MY_Model {

    public function __construct() {
        parent::__construct();
        MY_Model::set_table("tblCOM_Reimbursement");
    }

    public function table_data($data) {

        extract($data);

        $this->db->select(array(
                    'to_char("RE_DocDate", \'mm/dd/yyyy\') as "RE_DocDate" ',
                    'RE_DocNo',
                    'RE_EmployeeName',
                    'RE_Company',
                    'RE_Location',
                    'RE_Reimbursement',
                    'RE_Status',
                    'MD5("RE_DocNo") AS id'))
                ->order_by("DateCreated DESC")
                ->group_by("tblCOM_Reimbursement.RE_DocNo");


        if(isset($queries['date-from'])){
            $this->db->where(array('DATE("RE_DocDate") >=' => $queries['date-from']));
        }

        if(isset($queries['date-to'])){
            $this->db->where(array('DATE("RE_DocDate") <=' => $queries['date-to']));
        }

        if (isset($queries['search'])) {
            $this->db->or_having(array(
                'LOWER(CAST("RE_DocDate" as text)) LIKE'       => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("RE_DocNo" as text)) LIKE'         => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("RE_EmployeeName" as text)) LIKE'  => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("RE_Company" as text)) LIKE'       => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("RE_Location" as text)) LIKE'      => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("RE_Reimbursement" as text)) LIKE' => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("RE_Status" as text)) LIKE'        => '%' . strtolower($queries['search']) . '%'));
        }

        if (isset($sorts)) {
            $res = array();
            foreach ($sorts as $key => $value) {
                $order = $value == 1 ? "ASC" : "DESC";
                array_push($res, $key . " " . $order);
            }
            $this->db->order_by(implode(",", $res));
        }

        $result = $this->db->get("tblCOM_Reimbursement");

        if ($result->num_rows() > 0) {
            return array(
                'rows'  => $result->num_rows(),
                'count' => $result->num_rows(),
                'data'  => $result->result_array());
        } else {
            return FALSE;
        }
    }

    public function create_from_cash_advance($ca, $liquidation_amount) {

        $this->load->model('app/administration/no_series_model');
        $data = $this->no_series_model->get_no_series(100, "tblCOM_Reimbursement", 'RE_DocNo');

        $doc_no = $data['data'][0]['NS_Id'] . '-' . $data['data'][0]['nsnum'];

        $header["RE_DocNo"]            = $doc_no;
        $header["RE_DocDate"]          = date('Y-m-d');
        $header["RE_EmployeeName"]     = $this->session->userdata('U_SupplierID');
        $header["RE_Status"]           = "Open";
        $header["RE_WithCA"]           = '1';
        $header["RE_RefDocNo"]         = $ca["CA_DocNo"];
        $header["RE_CAAmount"]         = $ca["CA_Amount"];
        $header["RE_LiquidatedAmount"] = $liquidation_amount;

        $detail["RED_TransDate"] = date('Y-m-d');
        $detail["RED_Amount"]    = $liquidation_amount - $ca["CA_Amount"];

        $details = array($detail);

        return $this->update($header, $details);
    }

    public function update($header, $details){

        $status = 0;

        $header_where  = array('RE_DocNo'     => $header["RE_DocNo"]);
        $details_where = array('RED_RE_DocNo' => $header["RE_DocNo"]);

        try {
            $this->db->trans_begin();

            //  RE_Reimbursement is always auto generated by details
            unset($header["RE_Reimbursement"]);

            //  update header
            $this->db->where($header_where)->update('tblCOM_Reimbursement', $header);
//            $updated_header_query = $this->db->where($header_where)->select('*')->get('tblCOM_Reimbursement');
//            $updated_header       = $updated_header_query->row_array();
            //  reset details
            $this->db->where($details_where)->delete('tblCOM_ReimbursementDetail');

            if ($details) {
                $reimbursement_amount = $this->_store_details($header, $details);

                //  update reimbursement amount
                $new_reimbursement = array(
                    'RE_Reimbursement' => $reimbursement_amount
                );
                $this->db->where($header_where)->update('tblCOM_Reimbursement', $new_reimbursement);
            }

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
            } else {
                $this->db->trans_commit();
                $status = 1;
            }
        } catch (Exception $e) {
            $this->db->trans_rollback();
        }

        return $status;
    }

    private function _store_details($header, $details) {
        $total_amount = 0;
        foreach ($details as $value) {            
            $empty = !array_filter($value);
            if (!empty($value) && !$empty) {
                $value['RED_RE_DocNo'] = $header['RE_DocNo'];
                $value['RED_withVAT']  = array_key_exists('RED_withVAT', $value) && $value['RED_withVAT'] ? '1' : '0';

                $total_amount += $value["RED_Amount"];

                $this->db->insert('tblCOM_ReimbursementDetail', add_data($value));
            }
        }
        return $total_amount;
    }

    // private function _store_details_test($header, $details) {
    //     $total_amount = 0;
    //     foreach ($details as $value) {
    //         foreach($value["PCS_ItemType"] as $itemType) {
    //             $empty = !array_filter($value);
    //             if (!empty($value) && !$empty) {
    //                 $value['RED_RE_DocNo'] = $header['RE_DocNo'];
    //                 $value['RED_withVAT']  = array_key_exists('RED_withVAT', $value) && $value['RED_withVAT'] ? '1' : '0';

    //                 $total_amount += $value["RED_Amount"];

    //                 $this->db->insert('tblCOM_ReimbursementDetail', add_data($value));
    //             }
    //         }            
    //     }
    //     return $total_amount;
    // }

}
