<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Asset_disposal_model extends MY_Model {

    protected $header_table = "tblINV_ADV";
    protected $detail_table = "tblINV_ADVDetail";

    public function __construct() {
        parent::__construct();
        MY_Model::set_table($this->header_table);
    }

    public function table_data($data) {

        extract($data);

        $table_columns['ADV_DocNo']        = array('label' => 'Doc. No.', 'sorts' => true);
        $table_columns['ADV_DocDate']      = array('label' => 'Doc. Date');
        $table_columns['ADV_DisposalType'] = array('label' => 'Disposal Type');
        $table_columns['ADV_Location']     = array('label' => 'Location');
        $table_columns['ADV_Remarks']      = array('label' => 'Remarks');

        $this->db->select(array(
                    'ADV_DocNo',
                    'to_char("ADV_DocDate", \'mm/dd/yyyy\') as "ADV_DocDate" ',
                    'ADV_DisposalType',
                    'ADV_Location',
                    'ADV_Remarks',
                    'MD5("ADV_DocNo") AS id'))
                ->order_by("DateCreated DESC")
                ->group_by($this->header_table . ".ADV_DocNo");


        if (isset($queries['date-from'])) {
            $this->db->where(array('DATE("ADV_DocDate") >=' => $queries['date-from']));
        }

        if (isset($queries['date-to'])) {
            $this->db->where(array('DATE("ADV_DocDate") <=' => $queries['date-to']));
        }

        if (isset($queries['search'])) {
            $this->db->or_having(array(
                'LOWER(CAST("ADV_DocNo" as text)) LIKE'        => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("ADV_DocDate" as text)) LIKE'      => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("ADV_DisposalType" as text)) LIKE' => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("ADV_Location" as text)) LIKE'     => '%' . strtolower($queries['search']) . '%',
                'LOWER(CAST("ADV_Remarks" as text)) LIKE'      => '%' . strtolower($queries['search']) . '%'));
        }

        if (isset($sorts)) {
            $res = array();
            foreach ($sorts as $key => $value) {
                $order = $value == 1 ? "ASC" : "DESC";
                array_push($res, $key . " " . $order);
            }
            $this->db->order_by(implode(",", $res));
        }

        $result = $this->db->get($this->header_table);

        if ($result->num_rows() > 0) {
            return array(
                'rows'  => $result->num_rows(),
                'count' => $result->num_rows(),
                'data'  => $result->result_array());
        } else {
            return FALSE;
        }
    }

    public function update($header, $details) {

        $status = 0;

        $header_where  = array('ADV_DocNo' => $header["ADV_DocNo"]);
        $details_where = array('ADVD_ADV_DocNo' => $header["ADV_DocNo"]);

        try {
            $this->db->trans_begin();

            //  ADV_Reimbursement is always auto generated by details
            unset($header["ADV_TotalCost"]);

            //  update header
            $this->db->where($header_where)->update($this->header_table, $header);
//            $updated_header_query = $this->db->where($header_where)->select('*')->get('tblCOM_Reimbursement');
//            $updated_header       = $updated_header_query->row_array();
            //  reset details
            $this->db->where($details_where)->delete($this->detail_table);

            if ($details) {
                $reimbursement_amount = $this->_store_details($header, $details);

                //  update reimbursement amount
                $new_reimbursement = array(
                    'ADV_TotalCost' => $reimbursement_amount
                );

                //  TODO: move this outside later so there is only one update
                $this->db->where($header_where)->update($this->header_table, $new_reimbursement);
            }

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
            } else {
                $this->db->trans_commit();
                $status = 1;
            }
        } catch (Exception $e) {
            $this->db->trans_rollback();
        }

        return $status;
    }

    private function _store_details($header, $details) {
        $total_amount = 0;
        foreach ($details as $detail) {
            $empty = !array_filter($detail);
            if (!empty($detail) && !$empty) {
                $detail['ADVD_ADV_DocNo'] = $header['ADV_DocNo'];
                $detail['ADVD_Status']    = "Open";

                $total_amount += $detail["ADVD_TotalCost"];

                $this->db->insert($this->detail_table, add_data($detail));
            }
        }
        return $total_amount;
    }

}
